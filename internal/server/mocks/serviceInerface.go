// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/handlers.go
//
// Generated by this command:
//
//	mockgen -source=internal/server/handlers.go -destination=internal/server/mocks/serviceInerface.go
//

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	model "lamoda/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockserviceInterface is a mock of serviceInterface interface.
type MockserviceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockserviceInterfaceMockRecorder
}

// MockserviceInterfaceMockRecorder is the mock recorder for MockserviceInterface.
type MockserviceInterfaceMockRecorder struct {
	mock *MockserviceInterface
}

// NewMockserviceInterface creates a new mock instance.
func NewMockserviceInterface(ctrl *gomock.Controller) *MockserviceInterface {
	mock := &MockserviceInterface{ctrl: ctrl}
	mock.recorder = &MockserviceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceInterface) EXPECT() *MockserviceInterfaceMockRecorder {
	return m.recorder
}

// DeleteReservation mocks base method.
func (m *MockserviceInterface) DeleteReservation(ctx context.Context, ReservedProducts model.ReservedProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", ctx, ReservedProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockserviceInterfaceMockRecorder) DeleteReservation(ctx, ReservedProducts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockserviceInterface)(nil).DeleteReservation), ctx, ReservedProducts)
}

// MakeReservation mocks base method.
func (m *MockserviceInterface) MakeReservation(ctx context.Context, products model.ReservedProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeReservation", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeReservation indicates an expected call of MakeReservation.
func (mr *MockserviceInterfaceMockRecorder) MakeReservation(ctx, products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeReservation", reflect.TypeOf((*MockserviceInterface)(nil).MakeReservation), ctx, products)
}

// SelectAvailableQty mocks base method.
func (m *MockserviceInterface) SelectAvailableQty(ctx context.Context, stockID int) ([]model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAvailableQty", ctx, stockID)
	ret0, _ := ret[0].([]model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAvailableQty indicates an expected call of SelectAvailableQty.
func (mr *MockserviceInterfaceMockRecorder) SelectAvailableQty(ctx, stockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAvailableQty", reflect.TypeOf((*MockserviceInterface)(nil).SelectAvailableQty), ctx, stockID)
}
