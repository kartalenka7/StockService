// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/product_service/product_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/product_service/product_service.go -destination=mocks/productStorer.go
//

// Package mock_product_service is a generated GoMock package.
package mocks

import (
	context "context"
	model "lamoda/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockproductStorer is a mock of productStorer interface.
type MockproductStorer struct {
	ctrl     *gomock.Controller
	recorder *MockproductStorerMockRecorder
}

// MockproductStorerMockRecorder is the mock recorder for MockproductStorer.
type MockproductStorerMockRecorder struct {
	mock *MockproductStorer
}

// NewMockproductStorer creates a new mock instance.
func NewMockproductStorer(ctrl *gomock.Controller) *MockproductStorer {
	mock := &MockproductStorer{ctrl: ctrl}
	mock.recorder = &MockproductStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductStorer) EXPECT() *MockproductStorerMockRecorder {
	return m.recorder
}

// CheckStockAvailability mocks base method.
func (m *MockproductStorer) CheckStockAvailability(ctx context.Context, stockID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStockAvailability", ctx, stockID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckStockAvailability indicates an expected call of CheckStockAvailability.
func (mr *MockproductStorerMockRecorder) CheckStockAvailability(ctx, stockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStockAvailability", reflect.TypeOf((*MockproductStorer)(nil).CheckStockAvailability), ctx, stockID)
}

// DeleteReservation mocks base method.
func (m *MockproductStorer) DeleteReservation(ctx context.Context, stockId int, product model.Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", ctx, stockId, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockproductStorerMockRecorder) DeleteReservation(ctx, stockId, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockproductStorer)(nil).DeleteReservation), ctx, stockId, product)
}

// ReserveProduct mocks base method.
func (m *MockproductStorer) ReserveProduct(ctx context.Context, stockId int, product model.Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveProduct", ctx, stockId, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveProduct indicates an expected call of ReserveProduct.
func (mr *MockproductStorerMockRecorder) ReserveProduct(ctx, stockId, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveProduct", reflect.TypeOf((*MockproductStorer)(nil).ReserveProduct), ctx, stockId, product)
}
